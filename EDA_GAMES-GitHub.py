#!/usr/bin/env python
# coding: utf-8
Exploratory Data Analysis of Game Sales

Our main objective it is:
Try to answer how competitive it is the gaming industry?
Reasons why PC platform sells even less compared to others platforms.Data set provided by Gregory Smith
Source: https://www.kaggle.com/gregorut/videogamesales

This dataset contains a list of video games with sales greater than 100,000 copies.
It was generated by a scrape of vgchartz.com.Let's start!
# In[1]:


#set parameters for plot figure size

import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (10,7)


# In[2]:


# lib for reading and manipulate data
import pandas as pd
import numpy as np

# visual lib
import matplotlib.pyplot as plt
get_ipython().run_line_magic('matplotlib', 'inline')

# set seaborn theme
import seaborn as sns
sns.set_theme() # Calling this function with no arguments will activate seaborn’s “default” theme:


# In[3]:


df = pd.read_csv(r'C:\Users\Igor\Desktop\Estudos\Python\Portifolio\GameSales\archive\vgsales.csv') #database


# In[4]:


df.info()


# In[5]:


df.shape # (16598, 11) rows and columns


# In[6]:


df.columns


# In[7]:


# Check missing data
df.isnull().sum().sort_values(ascending=False).head()


# In[8]:


# Check duplication
len(df)-len(df.drop_duplicates())

Publisher        58 will be changed to Unknown
Year            271 will be dropped
# In[9]:


# Drop NA-values in YEAR
df.dropna(subset=['Year'], inplace=True)

# Changing missing publishers name to 'Unknown'
df.loc[df['Publisher'].isna() == True, ['Publisher']] = 'Unknown'

# Fix year format / Note: year is listed as float but would be better to be listed as int
df['Year'] = df['Year'].apply(int)


# In[10]:


df.describe().T


# In[11]:


# Categories list 

X = df # X = dataframe

for col_name in X.columns:
    if X[col_name].dtypes == 'object':
        unique_cat = len(X[col_name].unique())
        print("Feature '{col_name}' has {unique_cat} unique   categories".format(col_name=col_name, unique_cat=unique_cat))


# In[12]:


# Separating data into categorical and numerical

# Listing features categorical and numerical:
categorical_attributes = list(X.select_dtypes(include=['object']).columns)
numerical_attributes = list(X.select_dtypes(include=['float64', 'int64']).columns)
print('categorical_attributes:', categorical_attributes)
print('numerical_attributes:', numerical_attributes)


# In[13]:


# Create a graph with sales per year by all industry
df_Year = df.groupby('Year').sum().reset_index(drop=False)
df_Year.head(5)


# In[14]:


ax=plt.figure(figsize=(10,6))
sns.distplot(df['Year'])

2009 was the year with most games released.
# In[15]:


# Plot parameters 
figsize = [17, 7]
x = df_Year['Year']
y = df_Year['Global_Sales']
width = 0.8

# Bar chart
plt.figure(figsize=figsize)
bars = plt.bar(x, y, 
               width=width, 
               
               
              )

# Non-data objects
plt.title('Global Sales per Year', fontdict={'fontweight':'bold', 'fontsize':20})    # A bit of hardcoding
plt.xlabel('Year', fontdict={'fontsize':18, 'fontweight':'bold'})
plt.ylabel('Dollars ($M)', fontdict={'fontsize':18, 'fontweight':'bold'}, rotation='vertical')
plt.xticks(df_Year['Year'], rotation = 45)

plt.show()

There is evidence supporting that the plunge of sales after 09's can be related to the increasing popularity of Mobiles Games in the market.
# In[16]:


figsize = [17, 7]
Global_Sales_Yearly = df.groupby('Year')[['Global_Sales', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum()
Global_Sales_Yearly.plot(figsize=figsize)
plt.show()


# In[17]:


# Total Profit by Region
# Columns 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales'

df_trim = df[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]

#This part is dedicated to creating a properly dataframe with summed data
df_trim = df_trim.sum().reset_index()
df_trim = df_trim.rename(columns={"index": "Region", 0: "Sale"})
df_trim.columns
df_trim


# In[18]:


# Tree map of sales
# source: https://jingwen-z.github.io/data-viz-with-matplotlib-series5-treemap/
# source: https://www.analyticsvidhya.com/blog/2021/10/how-to-build-a-treemap-in-3-ways-using-python/
# source: https://www.analyticsvidhya.com/blog/2021/06/build-treemaps-in-python-using-squarify/
# source: https://towardsdatascience.com/stacked-bar-charts-with-pythons-matplotlib-f4020e4eb4a7

labels = ['North America','Europe','Japan','Others']
color = sns.color_palette("Set2")

import squarify

sns.set_style(style="whitegrid")
sizes = df_trim["Sale"].values      # proportions of the categories // sizes= df["values"].values# proportions of the categories
label = labels           # label = df_trim["Region"]                             

squarify.plot(sizes=sizes, label=label, alpha=1 , color=color, pad=True).set(title='Market Share by Region (Total Sales)')
plt.axis('off')
plt.show()

                                    #label = df_trim[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']] #label=df["labels"]
                                    # How to put sales in legend?
                                    #squarify.plot(sizes=sizes, label=label, alpha=0.8 ,color=colors, pad=True).set(title='Total Sales by Region in Billions ($USD)')

North America leads sales worldwide, more than 50% of all sales were consolidated there, which is impressive!
# In[19]:


# Most succesfull platforms (Sales)
df


# In[20]:


df.columns


# In[21]:


df_plat_sales = df[['Platform', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales', 'Name']]
df_plat_sales = df_plat_sales.groupby('Platform').sum().sort_values('Global_Sales', ascending=False).reset_index(drop=False).head(10)
df_plat_sales


# In[22]:


ax=plt.figure(figsize=(15,6))
df.groupby(['Platform'])['Global_Sales'].sum().sort_values(ascending=False).head(15).plot.bar()
plt.xticks(rotation=45)
plt.ylabel('Sales in Millions (USD)')
plt.title('Sales of games in different platforms (Worldwide)')

plt.show()

PS2 can be considered the most successfull platform in history, the gap between the launch of ps2 and release of ps3 it is approximately 6 years and 8 months. According to Sony.
# In[23]:


df.columns


# # Sales by decade

# # 1980s Publishers

# In[24]:


#Sales 1980s decade

Sales1980 = df.loc[(df['Year'] < 1990)].sort_values(by='Rank', ascending=True)
Sales1980

#Sales1980.hist(figsize=[15,10])
#Sales1980[['Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']]


# In[25]:


# Sorting data Global Sales grouped by Publisher

modplot1 = Sales1980[['Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']].groupby('Publisher').sum().reset_index(drop=False).sort_values(by='Global_Sales', ascending=False)
modplot1


# In[26]:


#Groupby small companies to plot tree map of concentration (excluding Nintendo and Atari of the dataframe)

modplot2 = modplot1.loc[(modplot1['Publisher'] != "Nintendo") & (modplot1['Publisher'] != "Atari")].sort_values(by='Global_Sales', ascending=False)
modplot2


# In[27]:


# Changing smaller publishers name to 'Other Publishers' using isna() was the easiest way that i've found but there are other ways of changing

modplot2.loc[modplot2['Publisher'].isna() == False, ['Publisher']] = 'Other Publishers'
modplot2 = modplot2.groupby('Publisher').agg({'NA_Sales': 'sum', 'EU_Sales' : 'sum', 'JP_Sales' : 'sum', 'Other_Sales' : 'sum', 'Global_Sales' : sum}).reset_index(drop=False)
modplot2


# In[28]:


#modplo1 consists of the two biggest companies 'Nintendo' and 'Atari'
modplot1 = modplot1.head(2)
modplot1


# In[29]:


#Concatenate both dataframes for plotting modplot1 + modplot2

modplottree80 = pd.concat([modplot1, modplot2])
modplottree80 = modplottree80[['Publisher', 'Global_Sales', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
modplottree80


# In[30]:


#Tree map of concentration market 1980s
#labels defined earlier
#sizes = Global_Sales
labels = modplottree80['Publisher']
color = sns.color_palette("Set2")

import squarify

sns.set_style(style="whitegrid")
sizes = modplottree80['Global_Sales'].values
label = labels                          

squarify.plot(sizes=sizes, label=label, alpha=1 , color=color, pad=True).set(title='1980s - Most profitable publishers (Global Sales)')
plt.axis('off')
plt.tight_layout()


# # 1990s Publishers

# In[31]:


Sales1990 = df.loc[(df['Year']>=1990) & (df['Year']<2000)].sort_values(by='Rank', ascending=True)
Sales1990


# In[32]:


# Sorting data Global Sales grouped by Publisher

modplot3 = Sales1990[['Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']].groupby('Publisher').sum().reset_index(drop=False).sort_values(by='Global_Sales', ascending=False)
modplot3


# In[33]:


## Groupby small companies to plot tree map of concentration (excluding Nintendo and Atari of the dataframe)

modplot4 = modplot3.loc[(modplot3['Publisher'] != "Nintendo") &
                        (modplot3['Publisher'] != "Sony Computer Entertainment") &
                        (modplot3['Publisher'] != "Electronic Arts") &
                        (modplot3['Publisher'] != "Konami Digital Entertainment") &
                        (modplot3['Publisher'] != "Sega")].sort_values(by='Global_Sales', ascending=False)
modplot4


# In[34]:


# Changing smaller publishers name to 'Other Publishers' using isna() was the easiest way that i've found but there are other ways of changing

modplot4.loc[modplot4['Publisher'].isna() == False, ['Publisher']] = 'Other Publishers'
modplot4 = modplot4.groupby('Publisher').agg({'NA_Sales': 'sum', 'EU_Sales' : 'sum', 'JP_Sales' : 'sum', 'Other_Sales' : 'sum', 'Global_Sales' : sum}).reset_index(drop=False)
modplot4


# In[35]:


# modplot1 consists of the two biggest companies 'Nintendo' and 'Sony'
modplot3 = modplot3.head(5)
modplot3


# In[36]:


# Changing Publishers Name 'Microsoft and Sony for better fitting when plotting'
modplot3.loc[modplot3['Publisher'] == "Konami Digital Entertainment", ['Publisher']] = 'Konami'
modplot3.loc[modplot3['Publisher'] == "Sony Computer Entertainment", ['Publisher']] = 'Sony'


# In[37]:


#Concatenate both dataframes for plotting modplot3 + modplot4
modplottree90 = pd.concat([modplot3, modplot4])
modplottree90 = modplottree90[['Publisher', 'Global_Sales', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
modplottree90


# In[38]:


#Tree map of concentration market 1980s
#labels defined earlier
#sizes = Global_Sales

labels = modplottree90['Publisher']
color = sns.color_palette("Set2")

import squarify


sns.set_style(style="whitegrid")
sizes = modplottree90['Global_Sales'].values

label = labels                          

squarify.plot(sizes=sizes, label=label, alpha=1 , color=color, pad=True).set(title='1990s - Most profitable publishers (Global Sales)')
plt.axis('off')
plt.tight_layout()


# In[39]:


# Plotly example
#import plotly.express as px
#fig = px.treemap(modplottree90, path=['Publisher'],values=sizes, width=700, height=700, title='1990s - Most profitable publisher (Global Sales)')
#fig.show()


# # 2000s Publishers

# In[40]:


Sales2000 = df.loc[(df['Year']>=2000) & (df['Year']<2010)].sort_values(by='Rank', ascending=True)
Sales2000


# In[41]:


# Sorting data Global Sales grouped by Publisher

modplot5 = Sales2000[['Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']].groupby('Publisher').sum().reset_index(drop=False).sort_values(by='Global_Sales', ascending=False)
modplot5 = modplot5
modplot5


# In[42]:


## Groupby small companies to plot tree map of concentration (excluding Nintendo and Atari of the dataframe)

modplot6 = modplot5.loc[(modplot5['Publisher'] != "Nintendo") &
                        (modplot5['Publisher'] != "Electronic Arts") &
                        (modplot5['Publisher'] != "Activision") &
                        (modplot5['Publisher'] != "Sony Computer Entertainment") &
                        (modplot5['Publisher'] != "THQ")].sort_values(by='Global_Sales', ascending=False)
modplot6


# In[43]:


# Changing smaller publishers name to 'Other Publishers' using isna() was the easiest way that i've found but there are other ways of changing

modplot6.loc[modplot6['Publisher'].isna() == False, ['Publisher']] = 'Other Publishers'
modplot6 = modplot6.groupby('Publisher').agg({'NA_Sales': 'sum', 'EU_Sales' : 'sum', 'JP_Sales' : 'sum', 'Other_Sales' : 'sum', 'Global_Sales' : sum}).reset_index(drop=False)
modplot6


# In[44]:


# modplot5 consists of the 5 biggest companies
modplot5 = modplot5.head(5)
modplot5


# In[45]:


# Changing Publishers Name for better fitting when plotting'

modplot5.loc[modplot5['Publisher'] == "Sony Computer Entertainment", ['Publisher']] = 'Sony'


# In[46]:


#Concatenate both dataframes for plotting modplot5 + modplot6
modplottree00 = pd.concat([modplot5, modplot6])
modplottree00 = modplottree00[['Publisher', 'Global_Sales', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
modplottree00


# In[47]:


#Tree map of concentration market 1980s
#labels defined earlier
#sizes = Global_Sales

labels = modplottree00['Publisher']
color = sns.color_palette("Set2")

import squarify


sns.set_style(style="whitegrid")
sizes = modplottree00['Global_Sales'].values

label = labels                          

squarify.plot(sizes=sizes, label=label, alpha=1 , color=color, pad=True).set(title='2000s - Most profitable publishers (Global Sales)')
plt.axis('off')
plt.tight_layout()


# # 2010s Publishers

# In[48]:


Sales2010 = df.loc[(df['Year']>=2010) & (df['Year']<=2020)].sort_values(by='Rank', ascending=True)
Sales2010


# In[49]:


# Sorting data Global Sales grouped by Publisher

modplot7 = Sales2010[['Publisher', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']].groupby('Publisher').sum().reset_index(drop=False).sort_values(by='Global_Sales', ascending=False)
modplot7


# In[50]:


## Groupby small companies to plot tree map of concentration (excluding Nintendo and Atari of the dataframe)

modplot8 = modplot7.loc[(modplot7['Publisher'] != "Electronic Arts") &
                        (modplot7['Publisher'] != "Nintendo") &
                        (modplot7['Publisher'] != "Activision") &
                        (modplot7['Publisher'] != "Ubisoft") &
                        (modplot7['Publisher'] != "Take-Two Interactive") &
                        (modplot7['Publisher'] != "Sony Computer Entertainment") &
                        (modplot7['Publisher'] != "Microsoft Game Studios") &
                        (modplot7['Publisher'] != "Warner Bros. Interactive Entertainment") &
                        (modplot7['Publisher'] != "Namco Bandai Games") &
                        (modplot7['Publisher'] != "Square Enix")].sort_values(by='Global_Sales', ascending=False)
modplot8


# In[51]:


# Changing smaller publishers name to 'Other Publishers' using isna() was the easiest way that i've found but there are other ways of changing

modplot8.loc[modplot8['Publisher'].isna() == False, ['Publisher']] = 'Other Publishers'
modplot8 = modplot8.groupby('Publisher').agg({'NA_Sales': 'sum', 'EU_Sales' : 'sum', 'JP_Sales' : 'sum', 'Other_Sales' : 'sum', 'Global_Sales' : sum}).reset_index(drop=False)
modplot8


# In[52]:


# Changing Publishers Name 'Microsoft and Sony for better fitting when plotting'
modplot7.loc[modplot7['Publisher'] == "Microsoft Game Studios", ['Publisher']] = 'Microsoft'
modplot7.loc[modplot7['Publisher'] == "Sony Computer Entertainment", ['Publisher']] = 'Sony'
modplot7.loc[modplot7['Publisher'] == "Warner Bros. Interactive Entertainment", ['Publisher']] = 'Warners Bros'


# In[53]:


modplot7 = modplot7.head(10) #setting the ten biggest companies only


# In[54]:


#Concatenate both dataframes for plotting modplot5 + modplot6
modplottree10 = pd.concat([modplot7, modplot8])
modplottree10 = modplottree10[['Publisher', 'Global_Sales', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']]
modplottree10


# In[55]:


#Tree map of concentration market 1980s
#labels defined earlier
#sizes = Global_Sales

labels = modplottree10['Publisher']
color = sns.color_palette("Set2")

import squarify


sns.set_style(style="whitegrid")
sizes = modplottree10['Global_Sales'].values

label = labels                          

squarify.plot(sizes=sizes, label=label, alpha=1 , color=color, pad=True).set(title='2010 - 2020 - Most profitable publishers (Global Sales)')
plt.axis('off')
plt.tight_layout()


# # How concentrated was the gaming industry by the decades?
# **Colage of tree maps**
Looking by each decade (since the beginning of the dataset in 1980)
The top 10 most profitable games (by decade) were published in a majority of times, by the same companies during 90s and 20s.
# # Most popular genres

# In[56]:


ax=plt.figure(figsize=(15,6))
df.groupby(['Genre'])['Global_Sales'].sum().sort_values(ascending=False).head(15).plot.bar()
plt.xticks(rotation=45)
plt.ylabel('Sales in Millions (USD)')
plt.title('Global Sales by Genre (Worldwide)')
sns.set_theme()
plt.grid(True)
plt.show()


# In[57]:


ax=plt.figure(figsize=(15,6))
df.groupby(['Platform'])['Global_Sales'].sum().sort_values(ascending=False).head(10).plot.bar()
plt.xticks(rotation=45)
plt.ylabel('Sales in Millions (USD)')
plt.title('Global Sales by Genre (Worldwide)')
sns.set_theme()
plt.grid(True)
plt.show()

As mentioned at the beginning, our main objective it is to understand why Consoles sells much more compared to PC's.
Here are some thoughts that the data would not eventually show us:

Firstly, it is much easier to ilegally download and play any game in a computer, this is a factor that needs to be take considered. That is one of the reason that some games were never released for computers, and also can influence on why PC sells much less than other platforms.

Secondly, PCs are more expensive than consoles, and the life-time it is a factor that might influence in consumers choice, not everyone can afford buying new videocards and other components constantly.

Thirdly, consoles were set for playing splitscreen games at the beginning, even before online games were popular.

Last, but not least, it would be interesting to check the increasing downloads and sales related to Mobile Games, wich can be considered another platform for gaming, but unfortunately it is not contemplated in this dataset.I do understand that further information can be extracted from the datasets, and I would really appreciate whoever gives a continuation to this EDA. :)